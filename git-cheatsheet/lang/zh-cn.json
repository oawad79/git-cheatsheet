{
  "commands": {
    "status": {
      "cmd": "status",
      "docs": "显示状态变化，包括1)暂存区与当前的 HEAD 提交之间(即将提交的)，2）工作区与暂存区(下次不会提交)，3）未曾被git追踪 (没有历史记录) "
    },
    "diff": {
      "cmd": "diff",
      "docs": "显示未添加到暂存区的不同"
    },
    "diff x": {
      "cmd": "diff <commit or branch>",
      "docs": "查看工作区与某一提交之间的不同。你也可以使用 HEAD 来对比上一提交，或是用分支名来和分支比较"
    },
    "add x": {
      "cmd": "add <file... or dir...>",
      "docs": "添加当前的新内容或是修改的文件到暂存区，作为下次提交的(部分)内容。用`add --interactive` 来交互式操作"
    },
    "add -u": {
      "cmd": "add -u",
      "docs": "添加当前修改(<strong>不包括新文件</strong>)到暂存区, 这与'git commit -a'准备提交内容的方式一致"
    },
    "rm x": {
      "cmd": "rm <file(s)...>",
      "docs": "从工作区和暂存区删除某个文件"
    },
    "mv x": {
      "cmd": "mv <file(s)...>",
      "docs": "从工作区和暂存区移动文件"
    },
    "commit -a": {
      "cmd": "commit -a [-m 'msg']",
      "docs": "提交上次提交之后的所有修改，1)未追踪的除外(即：所有暂存区有记录的文件)；2)从暂存区删除已在工作区删除的文件"
    },
    "checkout x": {
      "cmd": "checkout <files(s)... or dir>",
      "docs": "更新工作区文件或文件夹，<strong>不会</strong>切换分支"
    },
    "reset head x": {
      "cmd": "reset HEAD <file(s)...>",
      "docs": "从下次提交中移除指定文件。重置暂存区记录但是不处理工作区(即: 文件改动被保留但不会被提交)，同时报告没有被更新的文件"
    },
    "reset --soft head^": {
      "cmd": "reset --soft HEAD^",
      "docs": "恢复上一次提交，保留暂存区的改动"
    },
    "reset --hard": {
      "cmd": "reset --hard",
      "docs": "恢复工作区和暂存区到上次提交的状态，警告： 所有工作区修改都会被丢弃。使用这条命令来解决合并错误，如果你想从头开始的话传入 ORIG_HEAD 来撤销该次提交以来的所有改动"
    },
    "switch": {
      "cmd": "switch <branch>",
      "docs": "切换分支，更改工作区和暂存区为<branch>分支的内容，之后HEAD指向<branch>分支"
    },
    "checkout -b x": {
      "cmd": "checkout -b <name of new branch>",
      "docs": "新建一个分支并且立即切换过去"
    },
    "merge x": {
      "cmd": "merge <commit or branch>",
      "docs": "从<branch name>分支合并到当前分支，使用`&#8209;&#8209;no-commit`可以保持在(已经合并)但未提交状态"
    },
    "rebase x": {
      "cmd": "rebase <upstream>",
      "docs": "衍合：回滚从【当前提交和<upstream>分支分开处】开始直到当前提交的所有提交，将这些提交一一应用到<upstream>分支，结果作为<upstream>的新提交Reverts all commits since the current branch diverged from <upstream>, and then re-applies them one-by-one on top of changes from the HEAD of <upstream>."
    },
    "cherry-pick x": {
      "cmd": "cherry-pick <commit>",
      "docs": "把某个提交移动到当前分支来"
    },
    "revert x": {
      "cmd": "revert <commit>",
      "docs": "回滚<commit>指定的提交，这需要当前工作区是干净的，即相比于 HEAD 提交没有修改"
    },
    "diff --cached": {
      "cmd": "diff --cached [<commit>]",
      "docs": "查看已经暂存的内容和上次提交的区别，也可指定某一提交"
    },
    "commit": {
      "cmd": "commit [-m 'msg']",
      "docs": "暂存区中的当前内容连同提交信息储存为新提交"
    },
    "commit --amend": {
      "cmd": "commit --amend",
      "docs": "用当前暂存去的内容修改最近一次的提交，也可以拿来修改提交信息"
    },
    "log": {
      "cmd": "log",
      "docs": "显示最近的提交，新的在上边。参数:\r`&#8209;&#8209;decorate` 显示分支和tag名字到对应的提交\r`&#8209;&#8209;stat` 显示状态 (文件修改, 添加, 删除) \r`&#8209;&#8209;author=<author>`  只显示某个作者\r`&#8209;&#8209;after=\"MMM DD YYYY\"` 如(\"Jun 20 2008\") 只显示某个日期之后的提交\r`&#8209;&#8209;before=\"MMM DD YYYY\"` 只显示某个日期之前的提交\r`&#8209;&#8209;merge` 只与当前合并冲突有关的提交"
    },
    "diff x x": {
      "cmd": "diff <commit> <commit>",
      "docs": "显示两个提交之间的不同"
    },
    "branch": {
      "cmd": "branch",
      "docs": "显示所有（本地）存在的分支。参数 -r 显示远程追踪分支，参数 -a 显示全部"
    },
    "branch -d x": {
      "cmd": "branch -d <branch>",
      "docs": "删除某个分支，使用—D来强制删除"
    },
    "branch --track x x": {
      "cmd": "branch --track <new> <remote/branch>",
      "docs": "添加一个本地分支来跟踪某个远程分支"
    },
    "clone x": {
      "cmd": "clone <repo>",
      "docs": "下载<repo>指定的版本库，并在工作区迁出main分支的HEAD版本"
    },
    "pull x x": {
      "cmd": "pull <remote> <refspec>",
      "docs": "从远程版本库取得修改到当前分支. 一般来说, `git pull` 相当于 `git fetch` 然后做 `git merge FETCH_HEAD`."
    },
    "reset --hard x/x": {
      "cmd": "reset --hard <remote>/<branch>",
      "docs": "重置本地版本库，让它与远程版本一致；用 `reset &#8209;&#8209;hard origin/main` 来丢弃所有的本地改动；用这个来处理失败的合并，直接从远程开始"
    },
    "fetch x x": {
      "cmd": "fetch <remote> <refspec>",
      "docs": "从远端版本库下载对象和引用(即版本信息)"
    },
    "push": {
      "cmd": "push",
      "docs": "从本地提交推送分支改变到远程，分支为所有推送过的分支"
    },
    "push x x": {
      "cmd": "push <remote> <branch>",
      "docs": "向远端版本库推送新的(已存在的)分支"
    },
    "push x x:x": {
      "cmd": "push <remote> <branch>:<branch>",
      "docs": "向远端版本库推送分支，但是从不同的（本地）分支名"
    },
    "branch -r": {
      "cmd": "branch -r",
      "docs": "显示远程端分支"
    },
    "push --delete": {
      "cmd": "push <remote> --delete <branch>",
      "docs": "删除一个远程分支，通过向远程分支推送空内容"
    },
    "clean": {
      "cmd": "clean",
      "docs": "从当前文件夹开始递归清理不受版本管理的内容"
    },
    "stash push": {
      "cmd": "stash push [<msg>]",
      "docs": "保存当前修改到新的存档库，并且执行`git reset &#8209;&#8209;hard`来回滚. <msg>是可选的来描述存档。想快速建立存档，省略掉\"push\"和<msg>."
    },
    "stash apply": {
      "cmd": "stash apply [<stash>]",
      "docs": "从某个存档中将改变应用到工作区，默认是最近的存档"
    },
    "stash pop": {
      "cmd": "stash pop",
      "docs": "应用最后一个（或指定的）存档中的改动，然后从存档库丢弃它"
    },
    "stash list": {
      "cmd": "stash list",
      "docs": "显示当前你有的所有存档"
    },
    "stash show": {
      "cmd": "stash show [<stash>]",
      "docs": "显示存档中记录的改动，对比存档生成时的原来状态；不指定<stash>则显示最后一个"
    },
    "stash drop": {
      "cmd": "stash drop [<stash>]",
      "docs": "从存储区中删除单个存档；不指定<stash>则删除最后一个"
    },
    "stash clear": {
      "cmd": "stash clear",
      "docs": "清空存档库。注意相关存档会被清理，此操作<strong>不能被恢复</strong>"
    },
    "stash branch x": {
      "cmd": "stash branch <branchname> [<stash>]",
      "docs": "新建并检出一个新分支<branchname>, 分支开始于存档建立时的源提交，应用存档的变化作为新的工作区和暂存区。如果成功并且<stash>是以 stash@{<revision>}方式给出的，则从存档库删除它。未给出则使用最后一个存档。这在当前分支运行 stash push 导致冲突时很好用，因为存档应用于它生成时的提交一定不会有冲突发生"
    }
  },
  "locations": {
    "stash": "存档库",
    "workspace": "工作区",
    "index": "暂存区(索引)",
    "local_repo": "本地版本库",
    "remote_repo": "上游版本库",
    "docs": {
      "stash": "当你去修改别的东西的时候，隐藏（临时保存）当前的修改",
      "workspace": "本地检出",
      "index": "索引（暂存区）保存了一份工作(树)的快照,作为下次提交的内容",
      "local_repo": ".git 文件夹保存版本库需要的全部信息(Git 版本库的骨架)，一般包括分支<strong>main</strong>, <strong>feature-x</strong>, <strong>bugfix-y</strong>",
      "remote_repo": "在网络（局域或因特网）上共享给其他开发者的版本库，一般叫\"origin\". 一般包括分支<strong>main</strong>, <strong>shared-feature-x</strong>, <strong>release-y</strong>"
    }
  }
}
