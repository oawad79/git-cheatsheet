{
  "locations": {
    "stash": "REMISE",
    "workspace": "ESPACE DE TRAVAIL",
    "index": "INDEX",
    "local_repo": "DÉPÔT LOCAL",
    "remote_repo": "DÉPÔT DISTANT",
    "docs": {
      "stash": "Un endroit où remiser des modifications pendant que vous travaillez sur autre chose",
      "workspace": "L'espace de travail local",
      "index": "L'index (ou \"zone de transit\") maintient un instantané de l'espace de travail qui servira de base pour le prochain commit.",
      "local_repo": "Un sous-répertoire nommé .git qui contient tous les fichiers nécessaires au référentiel. Branches typiques : `main`, `fonction-x`, `correctif-y`",
      "remote_repo": "Versions de votre projet qui sont hébergés sur le réseau ou Internet, pour mettre toutes vos modifications à la disposition d'autres développeurs. Par défaut «origin». Branches typiques : `main`, `fonction-x-partagée`, `version-y`"
    }
  },
  "commands": {
    "status": {
      "cmd": "status",
      "docs": "Affiche les chemins des fichiers qui diffèrent entre l'INDEX et la TÊTE du commit courant, ceux des fichiers qui diffèrent entre l'ESPACE_DE_TRAVAIL et l'INDEX, et ceux des fichiers qui sont dans l'ESPACE_DE_TRAVAIL mais ne sont pas encore suivis par git."
    },
    "diff": {
      "cmd": "diff",
      "docs": "Affiche les différences entre l'ESPACE_DE_TRAVAIL et l'INDEX."
    },
    "diff x": {
      "cmd": "diff <commit ou branche>",
      "docs": "Affiche les différences entre l'ESPACE_DE_TRAVAIL et le COMMIT ou la BRANCHE spécifié. Vous pouvez utiliser TÊTE pour comparer avec le dernier commit."
    },
    "add x": {
      "cmd": "add <fichier(s) ou dossier(s)>",
      "docs": "Ajoute à l'INDEX le contenu des FICHIER(S) ou DOSSIER(S), nouveaux ou modifiés, les plaçant ainsi en attente d'inclusion dans le prochain commit. Utilisez 'git add --interactive' pour ajouter de manière interactive à l'INDEX les contenus modifiés dans l'ESPACE_DE_TRAVAIL."
    },
    "add -u": {
      "cmd": "add -u",
      "docs": "Ajoute à l'INDEX le contenu des fichiers (ÉXISTANTS) modifiés. C'est ce que fait 'git commit -a' en préparation à un commit."
    },
    "rm x": {
      "cmd": "rm <fichier(s)>",
      "docs": "Supprime des FICHIER(S) de l'ESPACE_DE_TRAVAIL et de l'INDEX."
    },
    "mv x": {
      "cmd": "mv <fichier(s)>",
      "docs": "Déplace des FICHIER(S) de l'ESPACE_DE_TRAVAIL et de l'INDEX."
    },
    "commit -a": {
      "cmd": "commit -a [-m 'message']",
      "docs": "Fait un commit de tous les fichiers qui ont changé depuis le dernier commit, à l'exception des fichiers non suivis (ie. tous les fichiers qui sont dans l'INDEX). Supprime de l'INDEX les fichiers qui ont été supprimés de l'ESPACE_DE_TRAVAIL."
    },
    "checkout x": {
      "cmd": "checkout <fichier(s) ou dossier(s)>",
      "docs": "Met à jour les FICHIER(S) ou DOSSIER(S) dans l'ESPACE_DE_TRAVAIL en écrasant toutes les modifications locales. Ne PAS changer de branches."
    },
    "switch": {
      "cmd": "switch <branche>",
      "docs": "Échange les branches en mettant à jour l'ESPACE_DE_TRAVAIL et l'INDEX pour charger la BRANCHE spécifiée en positionnant la TÊTE dessus."
    },
    "reset head x": {
      "cmd": "reset HEAD <fichier(s)>",
      "docs": "Supprime les FICHIER(S) spécifiés du prochain commit. Réinitialise l'INDEX mais pas l'ESPACE_DE_TRAVAIL (i.e. les fichiers modifiés sont préservés mais non marqués pour commit) et indique ce qui n'a pas été mis à jour."
    },
    "reset --soft head^": {
      "cmd": "reset --soft HEAD^",
      "docs": "Défait le dernier commit en laissant les modifications dans l'INDEX."
    },
    "reset --hard": {
      "cmd": "reset --hard",
      "docs": "Fait correspondre l'ESPACE_DE_TRAVAIL et l'INDEX avec le DÉPÔT_LOCAL. ATTENTION : toutes les modifications apportées à des fichiers suivis dans l'ESPACE_DE_TRAVAIL depuis le dernier commit sont perdues. Utilisez ceci lorsqu'une fusion a engendré des conflits et que vous souhaitez recommencer. Précisez `ORIG_HEAD` pour défaire la dernière fusion réussie et les modifications qui ont suivi."
    },
    "checkout -b x": {
      "cmd": "checkout -b <branche>",
      "docs": "Crée une nouvelle BRANCHE et se positionne dessus."
    },
    "merge x": {
      "cmd": "merge <commit ou branche>",
      "docs": "Fusionne les modifications du COMMIT ou de la BRANCHE dans la branche courante. Utilisez --no-commit pour ignorer les modifications n'ayant pas encore fait l'objet d'un commit."
    },
    "rebase x": {
      "cmd": "rebase <source>",
      "docs": "Défait tous les commits effectués depuis que la branche à divergé de SOURCE puis les refait tous un par un sur les modifications apportées à la TÊTE de SOURCE."
    },
    "cherry-pick x": {
      "cmd": "cherry-pick <commit>",
      "docs": "Intègre les modifications du COMMIT spécifié dans la branche courante."
    },
    "revert x": {
      "cmd": "revert <commit>",
      "docs": "Défait le COMMIT spécifié puis fait un commit du résultat. Cela nécessite que l'ESPACE_DE_TRAVAIL soit propre (sans modifications sur la TÊTE du commit)."
    },
    "diff --cached": {
      "cmd": "diff --cached [COMMIT]",
      "docs": "Montre les modifications que vous avez placé dans la REMISE par rapport au dernier commit. Vous pouvez préciser un COMMIT pour voir juste les modifications le concernant."
    },
    "commit": {
      "cmd": "commit [-m 'message']",
      "docs": "Enregistre le contenu de l'INDEX dans un nouveau commit en y associant un message utilisateur décrivant les modifications."
    },
    "commit --amend": {
      "cmd": "commit --amend",
      "docs": "Modifie le dernier commit en y apportant les modifications se trouvant dans l'INDEX."
    },
    "log": {
      "cmd": "log",
      "docs": "Montre les commits récents, les plus récents au début. Options : --decorate avec les noms de branches et d'étiquettes sur les commits, --stat avec des statistiques (fichiers modifiés, insertions et suppressions), --author=AUTEUR seuleument d'un certain AUTEUR, --after=\"MMM JJ AAAA\" ex. (\"Jun 20 2008\") limité aux commits faits après une certaine date, --before=\"MMM JJ AAAA\" limité aux commits faits avant une certaine date, --merge limité aux commits concernés par les conflits de fusion courants."
    },
    "diff x x": {
      "cmd": "diff <COMMIT_1> <COMMIT_2>",
      "docs": "Montre les modifications entre deux commits."
    },
    "branch": {
      "cmd": "branch",
      "docs": "Liste les branches locales existantes. L'option -r permet de lister les branches distantes et l'option -a montre les branches locales et distantes."
    },
    "branch -d x": {
      "cmd": "branch -d <branche>",
      "docs": "Supprime la BRANCHE spécifiée. Utilisez -D pour forcer la suppression."
    },
    "branch --track x x": {
      "cmd": "branch --track <branche> <branche_distante>",
      "docs": "Crée une BRANCHE locale qui suit la branche_distante."
    },
    "clone x": {
      "cmd": "clone <dépôt_distant>",
      "docs": "Télécharge le DÉPÔT_DISTANT et se positionne sur la TÊTE de sa branche main."
    },
    "pull x x": {
      "cmd": "pull <dépôt_distant> <référence>",
      "docs": "Récupère les modifications associées à la référence du DÉPÔT_DISTANT et les fusionne dans la branche courante."
    },
    "reset --hard x/x": {
      "cmd": "reset --hard <dépôt_distant> <branche>",
      "docs": "Réinitialise l'ESPACE_DE_TRAVAIL et le DÉPÔT_LOCAL pour les faire correspondre à la BRANCHE du DÉPÔT_DISTANT. Utilisez 'git reset --hard origin/main' pour rejeter tous les commits du DÉPÔT_LOCAL. Utilisez ceci pour reprendre après une fusion qui a échoué."
    },
    "fetch x x": {
      "cmd": "fetch <dépôt_distant> <référence>",
      "docs": "Télécharge les objets et les références associés à la référence du DÉPÔT_DISTANT."
    },
    "push": {
      "cmd": "push",
      "docs": "Met à jour le serveur en appliquant les commits sur toutes les branches *COMMUNNES* au DÉPÔT_LOCAL et au serveur. Les branches locales qui n'ont jamais été poussées sur le serveur ne sont pas partagées."
    },
    "push x x": {
      "cmd": "push <dépôt_distant> <branche>",
      "docs": "Pousse la BRANCHE spécifiée vers le DÉPÔT_DISTANT."
    },
    "push x x:x": {
      "cmd": "push <dépôt_distant> <BRANCHE_1>:<BRANCHE_2>",
      "docs": "Pousse la nouvelle BRANCHE_1 vers le DÉPÔT_DISTANT en la renommant BRANCHE_2."
    },
    "branch -r": {
      "cmd": "branch -r",
      "docs": "Liste les branches distantes."
    },
    "push x :x": {
      "cmd": "push <dépôt_distant> :<branche>",
      "docs": "Supprime la BRANCHE du DÉPÔT_DISTANT."
    },
    "clean": {
      "cmd": "clean",
      "docs": "Nettoie l'ESPACE_DE_TRAVAIL en supprimant récursivement les fichiers qui ne sont pas sous le contrôle de version, en commençant par le répertoire courant."
    },
    "stash push": {
      "cmd": "stash push ['message']",
      "docs": "Enregistre les modifications locales dans la REMISE puis fait un 'git reset --hard' pour les défaire. Le `message` optionnel donne la description associée à l'état enregistré dans la REMISE. Pour faire un instantanné rapide, vous pouvez omettre à la fois \"push\" et le `message`."
    },
    "stash apply": {
      "cmd": "stash apply [état]",
      "docs": "Déplace les modifications associées à l'ÉTAT de la REMISE vers l'ESPACE_DE_TRAVAIL. La dernière REMISE est prise par défaut."
    },
    "stash pop": {
      "cmd": "stash pop",
      "docs": "Applique les modifications du dernier état de la REMISE puis les supprime de la REMISE."
    },
    "stash list": {
      "cmd": "stash list",
      "docs": "Liste les états dans la REMISE."
    },
    "stash show": {
      "cmd": "stash show [état]",
      "docs": "Montre les modifications associées à l'ÉTAT spécifié sous la forme d'un diff entre l'ÉTAT et son parent initial. Lorsqu'aucun ÉTAT n'est précisé, le dernier est montré."
    },
    "stash drop": {
      "cmd": "stash drop [état]",
      "docs": "Supprime l'ÉTAT de la REMISE. Lorsqu'aucun ÉTAT n'est précisé, le dernier est supprimé."
    },
    "stash clear": {
      "cmd": "stash clear",
      "docs": "Supprime tous les états de la REMISE. Notez que ces états seront alors candidats à l'élagage et pourront être impossible à restaurer."
    },
    "stash branch x": {
      "cmd": "stash branch <branche> [état]",
      "docs": "Crée et charge une nouvelle BRANCHE à partir du commit d'où provient l'ÉTAT puis applique les modifications enregistrées dans l'ÉTAT aux nouveaux ESPACE_DE_TRAVAIL et INDEX. Si cela réussit, l'ÉTAT devient une référence de la forme ÉTAT@{RÉVISION} et l'ÉTAT est supprimé. Lorsqu'aucun ÉTAT n'est donné, le dernier est appliqué. Ceci est utile si une branche sur laquelle vous avez fait un 'stash' a suffisemment changée pour que 'stash apply' échoue à cause de conflits. Puisque l'état est apliqué sur le commit qui était en TÊTE au moment où le 'stash' a été effectué, l'état original est restauré sans conflits."
    }
  }
}
