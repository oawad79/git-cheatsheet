{
  "locations": {
    "stash": "stash",
    "workspace": "workspace",
    "index": "index",
    "local_repo": "repositorio local",
    "remote_repo": "repositorio remoto",
    "docs": {
      "stash": "Un lugar para ocultar cambios mientras trabajas en otra cosa",
      "workspace": "Espacio de trabajo: archivos locales posicionados en una rama",
      "index": "El index (o \"staging area\") contiene una captura del contenido del árbol de trabajo. Esta captura representa a los contenidos del próximo commit.",
      "local_repo": "Un subdirectorio llamado .git que contiene todos los archivos necesarios — un esqueleto del repositorio Git. Ramas típicas: `main`, `feature-x`, `bugfix-y`",
      "remote_repo": "Version(es) del proyecto que están alojadas en Internet o una red, asegurando que todos los cambios están disponibles para otros desarrolladores. Por defecto es \"origin\". Ramas típicas aquí son: `main`, `shared-feature-x`, `release-y`"
    }
  },
  "commands": {
    "status": {
      "cmd": "status",
      "docs": "Muestra las localizaciones que tienen diferencias entre el index y el commit `HEAD` actual, localizaciones que tienen diferencias entre el workspace y el index, y localizaciones en el workspace que no están siendo registradas por git"
    },
    "diff": {
      "cmd": "diff",
      "docs": "Muestra las diferencias no añadidas al index."
    },
    "diff x": {
      "cmd": "diff <commit or branch>",
      "docs": "Muestra los cambios que existen en el workspace relativos al <commit> mencionado. Puede usarse `HEAD` para comparar contra el último commit, o el nombre de una rama (branch) para comparar contra otra rama"
    },
    "add x": {
      "cmd": "add <file... or dir...>",
      "docs": "Añade el contenido actual de archivos nuevos o modificados al index, preparando a la vez ese contenido para ser incluído en el próximo commit. Usar `add --interactive` para añadir los contenidos del espacio de trabajo al index de manera interactiva."
    },
    "add -u": {
      "cmd": "add -u",
      "docs": "Añade el contenido actual de los archivos modificados (NO NUEVOS) al index. Es similar a lo que hace 'git commit -a' al prepararse para realizar un commit."
    },
    "rm x": {
      "cmd": "rm <file(s)...>",
      "docs": "Elimina uno o varios archivos del espacio de trabajo e index."
    },
    "mv x": {
      "cmd": "mv <file(s)...>",
      "docs": "Mueve uno o varios archivos del espacio de trabajo e index."
    },
    "commit -a": {
      "cmd": "commit -a [-m 'msg']",
      "docs": "Realiza un commit con todos los cambios en los archivos desde el último commit, excluyendo los archivos no registrados (ej: todos los archivos que están listados en index). Elimina archivos en index que fueron eliminados del espacio de trabajo."
    },
    "checkout x": {
      "cmd": "checkout <file(s)... or dir>",
      "docs": "Actualiza el archivo o directorio en el espacio de trabajo. Esto NO cambia de rama."
    },
    "reset head x": {
      "cmd": "reset HEAD <file(s)...>",
      "docs": "Descarta los archivos especificados del próximo commit. Restablece el index pero no el árbol de trabajo (ej:, los cambios en archivos se mantienen pero no se preparan para commit) y reporta cuales no han sido actualizados."
    },
    "reset --soft head^": {
      "cmd": "reset --soft HEAD^",
      "docs": "Deshace el último commit, dejando los cambio en el index."
    },
    "reset --hard": {
      "cmd": "reset --hard",
      "docs": "Equipara el espacio de trabajo y el index al árbol local. ADVERTENCIA: Se pierden todos los cambios a archivos registrados por git desde el último commit. Usar este comando si una combinación/merge resultó en conflictos y es necesario comenzar de nuevo. Al pasar `ORIG_HEAD` puede deshacerse el merge más reciente y todos los cambios posteriores."
    },
    "switch": {
      "cmd": "switch <branch>",
      "docs": "Cambia de rama actualizando el index y el espacio de trabajo para reflejar la rama especificada, <branch>, y actualizando la posición de `HEAD` a <branch>."
    },
    "checkout -b x": {
      "cmd": "checkout -b <name of new branch>",
      "docs": "Crea una rama y posiciona el `HEAD` allí"
    },
    "merge x": {
      "cmd": "merge <commit or branch>",
      "docs": "Combina (merge) los cambios de <branch name> con los de la rama actual.\rUsar `&#8209;&#8209;no-commit` para dejar los cambios sin realizar un commit."
    },
    "rebase x": {
      "cmd": "rebase <upstream>",
      "docs": "Revierte todos los commits desde que la rama actual se separó del <upstream>, y luego los vuelve a aplicar uno por uno por sobre los commits del `HEAD` de <upstream>."
    },
    "cherry-pick x": {
      "cmd": "cherry-pick <commit>",
      "docs": "Aplica los cambios del commit especificado en la rama actual."
    },
    "revert x": {
      "cmd": "revert <commit>",
      "docs": "Revierte el <commit> especificado y realiza un commit con el resultado. Esto requiere que el árbol de trabajo esté limpio (sin modificaciones desde el `HEAD` commit)"
    },
    "diff --cached": {
      "cmd": "diff --cached [<commit>]",
      "docs": "Visualiza los cambios que se han preparado vs el último commit. Se puede pasar un <commit> para ver los cambios relativos al mismo."
    },
    "commit": {
      "cmd": "commit [-m 'msg']",
      "docs": "Almacena el contenido actual del index en un nuevo commit acompañado de un mensaje de log que describe esos cambios."
    },
    "commit --amend": {
      "cmd": "commit --amend",
      "docs": "Modifica el último commit con los cambios actuales en el index."
    },
    "log": {
      "cmd": "log",
      "docs": "Muestra los commits recientes, comenzando por los últimos. Optiones:\r`&#8209;&#8209;decorate` para incluir nombres de ramas y tags\r`&#8209;&#8209;stat` para incluir métricas (archivos modificados, insertados, and eliminados) \r`&#8209;&#8209;author=<author>`  para filtrar por autor\r`&#8209;&#8209;after=\"MMM DD YYYY\"` ej. (\"Jun 20 2008\") para incluir commits desde esa fecha\r`&#8209;&#8209;before=\"MMM DD YYYY\"` incluye commits anteriores a esa fecha \r`&#8209;&#8209;merge` incluye únicamente los commits involucrados en conflictos de combinación"
    },
    "diff x x": {
      "cmd": "diff <commit> <commit>",
      "docs": "Visualizar los cambios entre dos commits arbitrariamente"
    },
    "branch": {
      "cmd": "branch",
      "docs": "Lista todas las ramas existentes. Agregando -r lista las ramas registradas como remotas, la opción -a muestra ambas ramas."
    },
    "branch -d x": {
      "cmd": "branch -d <branch>",
      "docs": "Elimina la rama especificada. Usar -D para forzar esto."
    },
    "branch --track x x": {
      "cmd": "branch --track <new> <remote/branch>",
      "docs": "Crea una nueva rama local que sigue a una rama remota."
    },
    "clone x": {
      "cmd": "clone <repo>",
      "docs": "Descarga el repositorio especificado por <repo> y posiciona el `HEAD` en la rama main."
    },
    "pull x x": {
      "cmd": "pull <remote> <refspec>",
      "docs": "Incorpora los cambios desde un repositorio remoto en la rama actual. En su modo por defecto, `git pull` es un atajo de `git fetch` seguido por `git merge FETCH_HEAD`."
    },
    "reset --hard x/x": {
      "cmd": "reset --hard <remote>/<branch>",
      "docs": "Equipara el espacio de trabajo y el index con una rama remota. Usar `reset &#8209;&#8209;hard origin/main` para descartar todos los commits en la rama local main. Se puede utilizar para comenzar de nuevo desde una combinación/merge fallida."
    },
    "fetch x x": {
      "cmd": "fetch <remote> <refspec>",
      "docs": "Descarga los objetos y referencias desde otro repositorio."
    },
    "push": {
      "cmd": "push",
      "docs": "Actualiza el servidor con los commits de todas ramas que tienen en *COMÚN* entre el repositorio local y el remoto. Las ramas locales que nunca fueron enviadas al server (push) no están compartidas."
    },
    "push x x": {
      "cmd": "push <remote> <branch>",
      "docs": "Envía una nueva (o existente) rama al repositorio remoto"
    },
    "push x x:x": {
      "cmd": "push <remote> <branch>:<branch>",
      "docs": "Envía una rama al repositorio remoto con otro nombre"
    },
    "branch -r": {
      "cmd": "branch -r",
      "docs": "Lista las ramas remotas"
    },
    "push --delete": {
      "cmd": "push <remote> --delete <branch>",
      "docs": "Elimina una rama remota."
    },
    "clean": {
      "cmd": "clean",
      "docs": "Limpia el árbol de trabajo eliminando de forma recursiva los archivos que no están bajo el control de versionado, comenzando por el directorio actual"
    },
    "stash push": {
      "cmd": "stash push [<msg>]",
      "docs": "Guarda las modificaciones locales en un nuevo stash, y luego ejecuta git reset &#8209;&#8209;hard para revertirlas. El <msg> es optativo y agrega una descripción adicional al estado. Para realizar una captura rápida, se pueden omitir tanto \"push\" como <msg>."
    },
    "stash apply": {
      "cmd": "stash apply [<stash>]",
      "docs": "Aplica los cambios del stash especificado en el espacio de trabajo. Por defecto aplica el último stash."
    },
    "stash pop": {
      "cmd": "stash pop",
      "docs": "Aplica los cambios del stash especificado y luego lo elimina de los temporales. Por defecto aplica el último stash."
    },
    "stash list": {
      "cmd": "stash list",
      "docs": "Lista los stashes disponibles actualmente."
    },
    "stash show": {
      "cmd": "stash show [<stash>]",
      "docs": "Muestra los cambios almacenados en el stash aplicando un diff entre ese stash y su padre original. Por defecto utiliza el último stash."
    },
    "stash drop": {
      "cmd": "stash drop [<stash>]",
      "docs": "Elimina una entrada del listado de stash. Por defecto elimina el último stash."
    },
    "stash clear": {
      "cmd": "stash clear",
      "docs": "Elimina todos las entradas del stash. IMPORTANTE: estas entradas eliminadas pueden ser irrecuperables luego."
    },
    "stash branch x": {
      "cmd": "stash branch <branchname> [<stash>]",
      "docs": "Crea y posiciona `HEAD` en el <branchname> apuntando al commit del cual el <stash> fue creado originalmente, aplicando luego los cambios almacenados en el <stash> al nuevo árbol de trabajo. \rSi se realiza exitosamente, y <stash> es una referencia tipo stash@{<revision>}, el comando elimina el <stash>. Cuando no se especifica un <stash>, aplica el último. \rEste comando es útil en los casos en que la rama en la que se ejecutó git stash push ha cambiado demasiado por lo que git stash apply fallaría por conflictos. Al aplicar los cambios sobre el commit que fue `HEAD` al momento de ejecutar git stash originalmente, se restauran los cambios sin conflictos."
    }
  }
}
